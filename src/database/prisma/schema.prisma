enum PaymentStatus {
  pending
  success
  failed
  abandoned
}

enum PaymentMethod {
  paystack
}

enum OrderStatus {
  pending
  paid
  confirmed
  ordered
  shipped
  delivered
  cancelled
}

enum UserRole {
  admin
  customer
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  password        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  orders          Order[]
  payments        Payment[]
  shippingDetails ShippingDetail[]
  isEmailVerified Boolean          @default(false)
  otp             String?
  otpExpireAt     DateTime?
  role            UserRole         @default(customer)
  lastOrderNumber Int              @default(0)

  phone   String  @default("N/A")
  address String?

  firstName String @default("N/A")
  lastName  String @default("N/A")
}

model Order {
  id             String      @id @default(uuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  userEmail      String      @default("n/a")
  status         OrderStatus @default(pending)
  subTotal       Float       @default(0)
  total          Float
  subTotalNaira  Float       @default(0)
  totalNaira     Float       @default(0)
  createdAt      DateTime    @default(now())
  fullName       String      @default("n/a")
  phoneNumber    String      @default("n/a")
  recipientEmail String      @default("n/a")
  street         String      @default("n/a")
  city           String      @default("n/a")
  state          String      @default("n/a")
  handlingFee    Float       @default(0)
  deliveryFee    Float       @default(0)
  customFee      Float       @default(0)
  orderNumber    Int         @default(0)
  vat            Float       @default(0)
  updatedAt      DateTime    @default(now()) @updatedAt
  shippedAt      DateTime?
  deliveredAt    DateTime?
  items          OrderItem[]
  payments       Payment[]   @relation("OrderPayments")

  @@unique([userId, orderNumber], name: "user_order_number_unique")
}

model Payment {
  id          String        @id @default(uuid())
  orderId     String
  order       Order         @relation("OrderPayments", fields: [orderId], references: [id])
  userId      String
  userEmail   String        @default("n/a")
  user        User          @relation(fields: [userId], references: [id])
  amountInGBP Float         @default(0)
  amount      Float
  currency    String        @default("NGN")
  orderNumber Int           @default(0)
  status      PaymentStatus @default(pending)
  accessCode  String
  reference   String        @unique
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model OrderItem {
  id              String   @id @default(uuid()) // ðŸ‘ˆ UUID instead of autoincrement
  productLink     String
  productName     String
  details         String
  quantity        Int      @default(1)
  price           Float    @default(0)
  referenceNumber String
  estimatedWeight Float    @default(0)
  createdAt       DateTime @default(now())

  currency     String @default("GBP") // ðŸ‘ˆ new field
  priceInNaira Float  @default(0) // ðŸ‘ˆ new field

  // Optional relation to Order
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}

model ShippingDetail {
  id            String   @id @default(uuid())
  userId        String
  fullName      String
  phoneNumber   String
  email         String
  street        String
  city          String
  state         String
  saveAsDefault Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}


model Job {
  id        String   @id @default(uuid())
  type      String    @unique
  payload   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
